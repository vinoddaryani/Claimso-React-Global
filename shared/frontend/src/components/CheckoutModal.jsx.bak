// src/components/CheckoutModal.jsx -- FINAL, PRODUCTION-READY VERSION

import React, { useState } from 'react';
import ModalWrapper from './ModalWrapper';
import Button from './Button';
import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import { paymentProcessor } from '../services/payment.js';
import { getUserRegion } from '../utils/helpers.js'

const CheckoutModal = ({ isOpen, onClose, plan, purchase }) => {
  const stripe = useStripe();
  const elements = useElements();
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState(null);

// REPLACE the entire handleSubmit function in CheckoutModal.jsx with this version

  const handleSubmit = async (event) => {
    event.preventDefault();
    if (!stripe || !elements) {
      return;
    }
    
    setIsProcessing(true);
    setError(null);

    // --- Outer try...catch for the entire process ---
    try {
      // Step 1: Call our backend
      const { clientSecret } = await paymentProcessor.createPaymentIntent({
        amount: plan.price,
        currency: plan.currency,
        purchaseId: purchase.id,
        planId: plan.partnerId,
        customerRegion: getUserRegion() // We'll need to import or define getUserRegion
      });

      // Step 2: Confirm the payment
      const { error: stripeError, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
        payment_method: {
          card: elements.getElement(CardElement),
          billing_details: { name: 'Jenny Rosen' }, // Placeholder
        },
      });

      if (stripeError) {
        setError(stripeError.message);
        setIsProcessing(false);
        return; // Exit if card is declined, etc.
      }

      // Step 3: Handle successful payment
      if (paymentIntent.status === 'succeeded') {
        
        // --- Inner try...catch specifically for fulfillment ---
        try {
          setIsProcessing(true); // Keep processing state for fulfillment
          const { finalizeWarrantyPurchase } = await import('../services/firebase.js');
          await finalizeWarrantyPurchase(purchase.id, plan, paymentIntent.id);
          
          alert("Protection plan activated successfully!");
          onClose(); // Close modal on complete success

        } catch (fulfillmentError) {
          // This catch handles ONLY fulfillment errors
          console.error("Fulfillment Error:", fulfillmentError);
          setError("Your payment was successful, but we couldn't activate your plan. Please contact support.");
        }
        // --- End of inner try...catch ---

      }
    
    } catch (initialError) {
      // This outer catch handles errors from createPaymentIntent or other initial setup
      setError(initialError.message);
    } finally {
      // This will run regardless of success or failure, perfect for resetting the UI state
      setIsProcessing(false);
    }
    // --- End of outer try...catch...finally ---
  };
  
  const cardElementOptions = {
    style: {
      base: {
        color: 'var(--text-primary)',
        fontFamily: 'Inter, sans-serif',
        fontSize: '16px',
        '::placeholder': {
          color: 'var(--text-tertiary)',
        },
      },
      invalid: {
        color: 'var(--accent-danger)',
        iconColor: 'var(--accent-danger)',
      },
    },
  };

  return (
    <ModalWrapper isOpen={isOpen} onClose={onClose} title="Secure Checkout" customWidth="400px">
      <form onSubmit={handleSubmit} className="checkout-form">
        <div className="plan-summary" style={{textAlign: 'center', marginBottom: 'var(--spacing-4)'}}>
          <h4 style={{margin: 0}}>Protection for "{purchase.name}"</h4>
          <p style={{color: 'var(--text-secondary)', marginTop: 'var(--spacing-2)'}}>
            You are purchasing the <strong style={{color: 'var(--text-primary)'}}>{plan.partnerName}</strong> plan.
          </p>
        </div>
        <div className="card-element-container" style={{padding: 'var(--spacing-3)', border: '1px solid var(--border-color)', borderRadius: '8px'}}>
          <CardElement options={cardElementOptions} />
        </div>
        {error && <div className="payment-error" style={{color: 'var(--accent-danger)', marginTop: 'var(--spacing-3)', textAlign: 'center'}}>{error}</div>}
        <div className="checkout-actions" style={{display: 'flex', justifyContent: 'flex-end', gap: 'var(--spacing-3)', marginTop: 'var(--spacing-5)'}}>
          <Button type="button" onClick={onClose} variant="secondary" disabled={isProcessing}>Cancel</Button>
          <Button type="submit" disabled={!stripe || isProcessing}>
            {isProcessing ? 'Processing...' : `Pay $${plan.price.toFixed(2)}`}
          </Button>
        </div>
      </form>
    </ModalWrapper>
  );
};

export default CheckoutModal;